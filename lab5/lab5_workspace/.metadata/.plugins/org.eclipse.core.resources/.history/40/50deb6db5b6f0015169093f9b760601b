//public class StateAndReward {
//
//	
//	/* State discretization function for the angle controller */
//	public static String getStateAngle(double angle, double vx, double vy) {
//
//		int a = discretize(angle,39,-Math.PI/2,Math.PI/2);
//
//		String state = "Angle:"+ Integer.toString(a);;
//		
//		return state;
//	}
//
//	/* Reward function for the angle controller */
//	public static double getRewardAngle(double angle, double vx, double vy) {
//		
//		//double reward = 43 * (Math.PI - Math.abs(angle))/Math.PI;
//		double reward = (Math.PI - Math.abs(angle));
//
//		return reward;
//	}
//
//	/* State discretization function for the full hover controller */
//	public static String getStateHover(double angle, double vx, double vy) {
//
//		int a = discretize(angle,39,-Math.PI/2,Math.PI/2);
//
//		int vvy = discretize(vy,10,0, 20);
//			int vvx = discretize(vx,10,0, 20);
//	
//	
//			String state = "A:"+ Integer.toString(a) + "VY:" +Integer.toString(vvy) + "VX:"+Integer.toString(vvx);
//			
//			return state;
//	}
//
//	/* Reward function for the full hover controller */
//	public static double getRewardHover(double angle, double vx, double vy) {
//		
//		double rewardVelocity = 0;
//		
//		
//		if(Math.abs(vy)<1)rewardVelocity+=10;
//		else if (Math.abs(vy)<2) {
//			rewardVelocity+=5;
//		}
//		if(Math.abs(vx)>1)rewardVelocity=0;
//		if(Math.abs(vx)>2)rewardVelocity=-1;
//		System.out.println("RewardVelocity : " + rewardVelocity);
//		
//		double rewardHoover = rewardVelocity + 1*getRewardAngle(angle,vx,vy);
//
//		return rewardHoover;
//	}
//
//	// ///////////////////////////////////////////////////////////
//	// discretize() performs a uniform discretization of the
//	// value parameter.
//	// It returns an integer between 0 and nrValues-1.
//	// The min and max parameters are used to specify the interval
//	// for the discretization.
//	// If the value is lower than min, 0 is returned
//	// If the value is higher than min, nrValues-1 is returned
//	// otherwise a value between 1 and nrValues-2 is returned.
//	//
//	// Use discretize2() if you want a discretization method that does
//	// not handle values lower than min and higher than max.
//	// ///////////////////////////////////////////////////////////
//	public static int discretize(double value, int nrValues, double min,
//			double max) {
//		if (nrValues < 2) {
//			return 0;
//		}
//
//		double diff = max - min;
//
//		if (value < min) {
//			return 0;
//		}
//		if (value > max) {
//			return nrValues - 1;
//		}
//
//		double tempValue = value - min;
//		double ratio = tempValue / diff;
//
//		return (int) (ratio * (nrValues - 2)) + 1;
//	}
//
//	// ///////////////////////////////////////////////////////////
//	// discretize2() performs a uniform discretization of the
//	// value parameter.
//	// It returns an integer between 0 and nrValues-1.
//	// The min and max parameters are used to specify the interval
//	// for the discretization.
//	// If the value is lower than min, 0 is returned
//	// If the value is higher than min, nrValues-1 is returned
//	// otherwise a value between 0 and nrValues-1 is returned.
//	// ///////////////////////////////////////////////////////////
//	public static int discretize2(double value, int nrValues, double min,
//			double max) {
//		double diff = max - min;
//
//		if (value < min) {
//			return 0;
//		}
//		if (value > max) {
//			return nrValues - 1;
//		}
//
//		double tempValue = value - min;
//		double ratio = tempValue / diff;
//
//		return (int) (ratio * nrValues);
//	}
//
//}

public class StateAndReward {

	private static final double VEL_MAX = 0.2; 
	private static int STATES = 9; 
	private static double ANG_MAX = Math.PI / 3; 

	/* State discretization function for the angle controller */
	public static String getStateAngle(double angle, double vx, double vy) {
		// Chop up the possible angles to an interval and return the position as
		// our state.
		return Integer.toString(discretize2(angle, STATES, -ANG_MAX, ANG_MAX));
	}

	/* Reward function for the angle controller */
	public static double getRewardAngle(double angle, double vx, double vy) {
		return Math.PI - Math.abs(angle);
	}

	/* State discretization function for the full hover coATES, 0, Math.ntroller */
	public static String getStateHover(double angle, double vx, double vy) {

		String vx_state = Integer
				.toString(discretize2(vx, 2, -VEL_MAX, VEL_MAX));
		String vy_state = Integer
				.toString(discretize2(vy, 2, -VEL_MAX, VEL_MAX));

		return vx_state + vy_state;
	}

	/* Reward function for the full hover controller */
	public static double getRewardHover(double angle, double vx, double vy) {
		double reward = 0;
		
		double posVy = Math.abs(vy);
		double posVx = Math.abs(vx);
		
		if (posVy < 1){
			reward = 10;
		} else if (posVy < 2) {
			reward = 5;
		}
		
		if (posVx > 1){
			reward = 0;
		}
		
		return reward;
	}

	// ///////////////////////////////////////////////////////////
	// discretize() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 1 and nrValues-2 is returned.
	//
	// Use discretize2() if you want a discretization method that does
	// not handle values lower than min and higher than max.
	// ///////////////////////////////////////////////////////////
	public static int discretize(double value, int nrValues, double min,
			double max) {
		if (nrValues < 2) {
			return 0;
		}

		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * (nrValues - 2)) + 1;
	}

	// ///////////////////////////////////////////////////////////
	// discretize2() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 0 and nrValues-1 is returned.
	// ///////////////////////////////////////////////////////////
	public static int discretize2(double value, int nrValues, double min,
			double max) {
		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * nrValues);
	}

}

